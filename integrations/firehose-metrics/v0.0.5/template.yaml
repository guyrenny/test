AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Send Kinesis Firehose stream data to Coralogix.
Parameters:
  CoralogixRegion:
    Type: String
    Description: The region of your Coralogix Account [Europe, Europe2, India, Singapore, US, US2]. If set to Custom, you must provide a CustomDomain otherwise url will be invalid.
    AllowedValues:
      - Custom
      - Europe
      - Europe2
      - India
      - Singapore
      - US
      - US2
    Default: Custom
  CustomDomain:
    Type: String
    Description: The Custom Domain. If set, will be the domain used to send telemetry (e.g. coralogix.com, eu2.coralogix.com, coralogixsg.com).
    Default: ""
  ApiKey:
    Type: String
    Description: The Coralogix Api key which is used to validate your authenticity.
    NoEcho: true
  ApplicationName:
    Type: String
    Description: The desired Application Name within the Coralogix Platform. If not set, it will be the delivery stream name.
    Default: ""
  SubsystemName:
    Type: String
    Description: The desired Subsystem Name within the Coralogix Platform. If not set, it will be the ARN.
    Default: ""
  CloudwatchRetentionDays:
    Type: Number
    Description: Days of retention in Cloudwatch Log Groups.
    Default: 1
  IntegrationTypeMetrics:
    Type: String
    Description: "The integration type of the firehose delivery stream [CloudWatch_Metrics_OpenTelemetry070, CloudWatch_Metrics_OpenTelemetry070_WithAggregations] - default: CloudWatch_Metrics_OpenTelemetry070_WithAggregations"
    AllowedValues:
      - CloudWatch_Metrics_OpenTelemetry070
      - CloudWatch_Metrics_OpenTelemetry070_WithAggregations
    Default: CloudWatch_Metrics_OpenTelemetry070_WithAggregations
  OutputFormat:
    Type: String
    Description: "The output format of the cloudwatch metric stream [opentelemetry0.7, json] - default: opentelemetry0.7."
    AllowedValues:
      - opentelemetry0.7
      - json
    Default: opentelemetry0.7
  IncludeNamespaces:
    Description: >-
      A string comma-delimited list of namespaces to include to the metric stream. e.g. AWS/EC2,AWS/EKS,AWS/ELB,AWS/Logs,AWS/S3
    Type: String
    Default: ''
  IncludeNamespacesMetricNames:
    Description: >-
      A string json list of namespaces and metric_names to include to the metric stream.  JSON stringify the input to avoid format errors. e.g. {"AWS/EC2":["CPUUtilization","NetworkOut"],"AWS/S3":["BucketSizeBytes"]}
    Type: String
    Default: ''
  EnableAddtionalStatistics:
    Type: String
    Description: >-
      Enable recommended additional statistics to be included to the metric stream.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  AddtionalStatisticsConfigurations:
    Description: >-
      A json list of additional statistics to include to the metric stream following Cloudformation's MetricStreamStatisticsConfiguration Structure - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-metricstream-metricstreamstatisticsconfiguration.html JSON stringify the input to avoid format errors.
    Type: String
    Default: "[{\"AdditionalStatistics\":[\"p50\",\"p75\",\"p95\",\"p99\"],\"IncludeMetrics\":[{\"Namespace\":\"AWS/EBS\",\"MetricName\":\"VolumeTotalReadTime\"},{\"Namespace\":\"AWS/EBS\",\"MetricName\":\"VolumeTotalWriteTime\"},{\"Namespace\":\"AWS/ELB\",\"MetricName\":\"Latency\"},{\"Namespace\":\"AWS/ELB\",\"MetricName\":\"Duration\"},{\"Namespace\":\"AWS/Lambda\",\"MetricName\":\"PostRuntimeExtensionsDuration\"},{\"Namespace\":\"AWS/S3\",\"MetricName\":\"FirstByteLatency\"},{\"Namespace\":\"AWS/S3\",\"MetricName\":\"TotalRequestLatency\"}]}]"
  EnableMetricsTagsProcessors:
    Type: String
    Description: >-
      Enable the lambda metrics tags processor function. Set to false to remove the processor.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  IntegrationId:
    Type: String
    Description: The integration ID to register.
Metadata:
  SemanticVersion: 0.0.5
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - CoralogixRegion
          - CustomDomain
          - ApiKey
          - ApplicationName
          - SubsystemName
          - IntegrationId
      - Label:
          default: "Others"
        Parameters:
          - CloudwatchRetentionDays
      - Label:
          default: "Metrics Streaming"
        Parameters:
          - IntegrationTypeMetrics
          - OutputFormat
          - IncludeNamespaces
          - IncludeNamespacesMetricNames
          - EnableAddtionalStatistics
          - AddtionalStatisticsConfigurations
          - EnableMetricsTagsProcessors
Mappings:
  CoralogixRegionMap:
    Europe:
      LogUrl: coralogix.com
    Europe2:
      LogUrl: eu2.coralogix.com
    India:
      LogUrl: coralogix.in
    Singapore:
      LogUrl: coralogixsg.com
    US:
      LogUrl: coralogix.us
    US2:
      LogUrl: cx498.coralogix.com
    Custom:
      LogUrl: ""
Conditions:
  IsApplicationName: !Not [!Equals [!Ref ApplicationName, ""]]
  IsSubsystemName: !Not [!Equals [!Ref SubsystemName, ""]]
  IsCustomDomain: !Equals [!Ref CoralogixRegion, "Custom"]
  IsAdditionalStatisticsEnabled: !Not [!Equals [!Ref EnableAddtionalStatistics, "false"]]
  IsMetricsTagLambdaProcessorEnabled: !Equals [!Ref EnableMetricsTagsProcessors, "true"]
Resources:
  BackupDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - 'firehose-${StackGUID}-backup-metrics'
        - {StackGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref 'AWS::StackId']]]]}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  DeliveryStreamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/kinesisfirehose/${AWS::StackName}'
      RetentionInDays: !Ref CloudwatchRetentionDays
  DeliveryStreamLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref DeliveryStreamLogGroup
      LogStreamName: !Ref AWS::StackName
      ###################################
      # Firehose Metrics Stream
      ###################################
  LambdaProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: !Sub 'lambda.amazonaws.com'
            Action: sts:AssumeRole
  LambdaProcessorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-lambda'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - tag:GetResources
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
              - apigateway:GET
              - aps:ListWorkspaces
              - autoscaling:DescribeAutoScalingGroups
              - dms:DescribeReplicationInstances
              - dms:DescribeReplicationTasks
              - ec2:DescribeTransitGatewayAttachments
              - ec2:DescribeSpotFleetRequests
              - storagegateway:ListGateways
              - storagegateway:ListTagsForResource
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*:*'
      Roles:
        - Ref: LambdaProcessorRole
  LambdaMetricsTagsProcessors:
    Condition: IsMetricsTagLambdaProcessorEnabled
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub 'cx-cw-metrics-tags-lambda-processor-${AWS::Region}'
        S3Key: bootstrap.zip
      FunctionName: !Sub '${AWS::StackName}-metrics-transform'
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Role: !GetAtt LambdaProcessorRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          FILE_CACHE_PATH: "/tmp"
  FirehoseMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-firehose'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: 'firehose.amazonaws.com'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId:
                  Ref: AWS::AccountId
  FirehoseMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-firehose'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${BackupDataBucket}'
              - !Sub 'arn:aws:s3:::${BackupDataBucket}/*'
          - Effect: Allow
            Action:
              - logs:PutLogEvents
            Resource: !GetAtt DeliveryStreamLogGroup.Arn
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
            Resource:
              - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
              - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*'
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
            Condition:
              StringEquals:
                kms:ViaService: !Sub 's3.${AWS::Region}.amazonaws.com'
              StringLike:
                kms:EncryptionContext: !Sub 'arn:aws:s3:::${BackupDataBucket}'
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:GetFunctionConfiguration
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
      Roles:
        - Ref: FirehoseMetricsRole
  CoralogixDeliveryMetricsStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - FirehoseMetricsPolicy
      - CloudWatchMetricsPolicy
      - BackupDataBucket
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-metrics'
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        RoleARN: !GetAtt FirehoseMetricsRole.Arn
        EndpointConfiguration:
          Url: !If
            - IsCustomDomain
            - !Sub 'https://firehose-ingress.${CustomDomain}/firehose'
            - !Sub
              - 'https://firehose-ingress.${Domain}/firehose'
              - Domain: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, LogUrl]
          AccessKey:
            Ref: ApiKey
          Name: 'Coralogix'
        RequestConfiguration:
          ContentEncoding: GZIP
          CommonAttributes:
            - AttributeName: 'integrationType'
              AttributeValue: !Ref IntegrationTypeMetrics
            - !If
              - IsApplicationName
              - AttributeName: 'applicationName'
                AttributeValue: !Ref ApplicationName
              - !Ref 'AWS::NoValue'
            - !If
              - IsSubsystemName
              - AttributeName: 'subsystemName'
                AttributeValue: !Ref SubsystemName
              - !Ref 'AWS::NoValue'
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName:
            Ref: DeliveryStreamLogGroup
          LogStreamName:
            Ref: DeliveryStreamLogStream
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        RetryOptions:
          DurationInSeconds: 30
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          BucketARN: !GetAtt BackupDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN: !GetAtt FirehoseMetricsRole.Arn
        ProcessingConfiguration: !If
          - IsMetricsTagLambdaProcessorEnabled
          - Enabled: true
            Processors:
              - Type: Lambda
                Parameters:
                  - ParameterName: LambdaArn
                    ParameterValue: !Sub '${LambdaMetricsTagsProcessors.Arn}:$LATEST'
                  - ParameterName: BufferSizeInMBs
                    ParameterValue: '0.2'
                  - ParameterName: BufferIntervalInSeconds
                    ParameterValue: '61'
          - !Ref 'AWS::NoValue'
  CloudWatchMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-cloudwatchmetrics'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: !Sub 'streams.metrics.cloudwatch.amazonaws.com'
            Action: sts:AssumeRole
  CloudWatchMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-cloudwatchmetrics'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
              - firehose:DeleteDeliveryStream
              - firehose:UpdateDestination
            Resource: !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
      Roles:
        - Ref: CloudWatchMetricsRole
  LambdaCustomResourceCloudWatchMetricStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricStream
                  - cloudwatch:DeleteMetricStream
                Resource: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:metric-stream/*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${CloudWatchMetricsRole}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LambdaCustomResourceCloudWatchMetricStreamFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "The lambda function is used to create CloudWatch Metric Stream."
      Handler: index.handler
      Code:
        ZipFile: "import sys\nimport subprocess\n\nsubprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", '--upgrade', 'boto3', '--target', '/tmp/'])\nsys.path.insert(0, '/tmp/')\n\nimport boto3\nimport cfnresponse\nimport json\n\ndef handler(event, context):\n    response_data = {}\n    physical_id = \"\"\n    include_filter_list = []\n    statistics_configurations_list = []\n    try:\n      client = boto3.client('cloudwatch')\n      properties = event['ResourceProperties']\n      physical_id = properties['Name']\n      print(\"Received %s Event Type.\" % event['RequestType'])\n      if event['RequestType'] == \"Delete\":\n        response_data = client.delete_metric_stream(Name=physical_id)\n      else:\n        namespaces_property = properties[\"IncludeNamespacesInput\"].strip()\n        namespace_metrics_property = properties[\"IncludeNamespacesMetricNamesInput\"].strip()\n        statistics_configurations_property = properties[\"StatisticsConfigurationsInput\"].strip()\n        if statistics_configurations_property:\n          statistics_configurations_list = json.loads(statistics_configurations_property)\n        \n        if namespaces_property:\n          for namespace in namespaces_property.split(\",\"):\n            include_filter_list.append({'Namespace': namespace.strip()});\n        if namespace_metrics_property:\n          namespace_metrics_json = json.loads(namespace_metrics_property)\n          for namespace, metric_names in namespace_metrics_json.items():\n            include_filter_list.append({'Namespace': namespace.strip(), 'MetricNames': metric_names})\n        \n        if len(statistics_configurations_list) > 0:\n          response_data = client.put_metric_stream(Name=physical_id, FirehoseArn=properties['FirehoseArn'],\n                                                    RoleArn=properties['RoleArn'],\n                                                    OutputFormat=properties['OutputFormat'],\n                                                    IncludeFilters=include_filter_list,\n                                                    StatisticsConfigurations=statistics_configurations_list)\n        else:\n          response_data = client.put_metric_stream(Name=physical_id, FirehoseArn=properties['FirehoseArn'],\n                                                    RoleArn=properties['RoleArn'],\n                                                    OutputFormat=properties['OutputFormat'],\n                                                    IncludeFilters=include_filter_list)\n                                                \n      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)\n    except Exception as e:\n      print(e)\n      cfnresponse.send(event, context, cfnresponse.FAILED, {\"Error\": str(e)}, physical_id)\n"
      Runtime: python3.8
      Timeout: 300
      Role: !GetAtt LambdaCustomResourceCloudWatchMetricStreamRole.Arn
  LambdaCustomResourceCloudWatchMetricsStream:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaCustomResourceCloudWatchMetricStreamFunction.Arn
      Name: !Ref AWS::StackName
      OutputFormat: !Ref OutputFormat
      FirehoseArn: !GetAtt CoralogixDeliveryMetricsStream.Arn
      RoleArn: !GetAtt CloudWatchMetricsRole.Arn
      IncludeNamespacesInput: !Ref IncludeNamespaces
      IncludeNamespacesMetricNamesInput: !Ref IncludeNamespacesMetricNames
      StatisticsConfigurationsInput: !If [IsAdditionalStatisticsEnabled, !Ref AddtionalStatisticsConfigurations, '']
  # Used as a bridge because CF doesn't allow for conditional depends on clauses.
  NonNotifierResourcesAreReady:
    Type: AWS::CloudFormation::WaitConditionHandle
    Metadata:
      LambdaMetricsTagsProcessorsReady: !If [ IsMetricsTagLambdaProcessorEnabled, !Ref LambdaMetricsTagsProcessors, "" ]
  IntegrationStatusNotifier:
    Type: Custom::IntegrationsServiceNotifier
    DependsOn:
      - BackupDataBucket
      - DeliveryStreamLogGroup
      - DeliveryStreamLogStream
      - LambdaProcessorRole
      - LambdaProcessorPolicy
      - FirehoseMetricsRole
      - FirehoseMetricsPolicy
      - CoralogixDeliveryMetricsStream
      - CloudWatchMetricsRole
      - CloudWatchMetricsPolicy
      - LambdaCustomResourceCloudWatchMetricStreamRole
      - LambdaCustomResourceCloudWatchMetricStreamFunction
      - LambdaCustomResourceCloudWatchMetricsStream
      - NonNotifierResourcesAreReady

    Properties:
      #      {{AWS_ACCOUNT_ID}} is replaced during the template synchronisation
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:{{AWS_ACCOUNT_ID}}:function:integrations-custom-resource-notifier"
      IntegrationId: !Ref IntegrationId

      CoralogixDomain: !If
        - IsCustomDomain
        - !Ref CustomDomain
        - !FindInMap [ CoralogixRegionMap, !Ref CoralogixRegion, LogUrl ]
      CoralogixApiKey: !Ref ApiKey

      # Parameters to track
      IntegrationName: !Ref "AWS::StackName"
      SubsystemName: !Ref SubsystemName
      ApplicationName: !Ref ApplicationName
      CoralogixRegion: !Ref CoralogixRegion
      CustomDomain: !Ref CustomDomain
      CloudwatchRetentionDays: !Ref CloudwatchRetentionDays
      IntegrationTypeMetrics: !Ref IntegrationTypeMetrics
      OutputFormat: !Ref OutputFormat
      IncludeNamespaces: !Ref IncludeNamespaces
      IncludeNamespacesMetricNames: !Ref IncludeNamespacesMetricNames
      EnableAddtionalStatistics: !Ref EnableAddtionalStatistics
      AddtionalStatisticsConfigurations: !Ref AddtionalStatisticsConfigurations
      EnableMetricsTagsProcessors: !Ref EnableMetricsTagsProcessors
Outputs:
  BackupDataBucketName:
    Description: S3 Bucket where failed deliveries will be backed-up
    Value: !Sub
      - 'firehose-${StackGUID}-backup-metrics'
      - {StackGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref 'AWS::StackId']]]]}
  CoralogixDeliveryMetricsStreamARN:
    Description: The ARN for your Kinesis Firehose Delivery Stream, use this as the destination when adding CloudWatch Metrics subscription filters
    Value: !GetAtt CoralogixDeliveryMetricsStream.Arn
